" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc file of Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   You can find me at http://spf13.com
"
"   Copyright 2014 Steve Francia
"
"   Licensed under the Apache License, Version 2.0 (the "License");
"   you may not use this file except in compliance with the License.
"   You may obtain a copy of the License at
"
"       http://www.apache.org/licenses/LICENSE-2.0
"
"   Unless required by applicable law or agreed to in writing, software
"   distributed under the License is distributed on an "AS IS" BASIS,
"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
"   See the License for the specific language governing permissions and
"   limitations under the License.
" }

" User Local Settings {
"
" Customizations by yangao118@gmail.com

    color evening               " Load a colorscheme

    "highlight setting for colorscheme evening
    highlight MatchParen cterm=none ctermbg=red

    set nospell

    set nolist

    " indent_guides {

        let g:indent_guides_enable_on_vim_startup = 0

    "}

    " snippets & autocomplete {

        let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

        let g:ycm_show_diagnostics_ui = 0

    "}

    " key (re)mappings {

        " nnoremap <silent> <leader>ls :LinuxCodingStyle<cr>

    "}

    " linuxsty.vim {

        let g:linuxsty_patterns = [ "/linux/", "/kernel/" ]

    "}

    " vim-clang-format {

        let g:clang_format#code_style = "google"
        let g:clang_format#style_options = {
                \ "AccessModifierOffset" : -1,
                \ "AllowShortIfStatementsOnASingleLine" : "true",
                \ "AlwaysBreakTemplateDeclarations" : "true",
                \ "IndentWidth" : 2 }

        autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
        autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
        " ClangFormatAutoEnable will call ClangFormat when save the buf
        nmap <Leader>C :ClangFormatAutoToggle<CR>
        "autocmd FileType cpp ClangFormatAutoEnable

    "}
    " google c++ indent {
    " http://www.vim.org/scripts/script.php?script_id=2636
    "
    function! GoogleCppIndent()
        let l:cline_num = line('.')

        let l:orig_indent = cindent(l:cline_num)

        if l:orig_indent == 0 | return 0 | endif

        let l:pline_num = prevnonblank(l:cline_num - 1)
        let l:pline = getline(l:pline_num)
        if l:pline =~# '^\s*template' | return l:pline_indent | endif

        " TODO: I don't know to correct it:
        " namespace test {
        " void
        " ....<-- invalid cindent pos
        "
        " void test() {
        " }
        "
        " void
        " <-- cindent pos
        if l:orig_indent != &shiftwidth | return l:orig_indent | endif

        let l:in_comment = 0
        let l:pline_num = prevnonblank(l:cline_num - 1)
        while l:pline_num > -1
            let l:pline = getline(l:pline_num)
            let l:pline_indent = indent(l:pline_num)

            if l:in_comment == 0 && l:pline =~ '^.\{-}\(/\*.\{-}\)\@<!\*/'
                let l:in_comment = 1
            elseif l:in_comment == 1
                if l:pline =~ '/\*\(.\{-}\*/\)\@!'
                    let l:in_comment = 0
                endif
            elseif l:pline_indent == 0
                if l:pline !~# '\(#define\)\|\(^\s*//\)\|\(^\s*{\)'
                    if l:pline =~# '^\s*namespace.*'
                        return 0
                    else
                        return l:orig_indent
                    endif
                elseif l:pline =~# '\\$'
                    return l:orig_indent
                endif
            else
                return l:orig_indent
            endif

            let l:pline_num = prevnonblank(l:pline_num - 1)
        endwhile

        return l:orig_indent
    endfunction

    function! GoogleCppIndentOn()
        setlocal shiftwidth=2
        setlocal tabstop=2
        setlocal softtabstop=2
        setlocal expandtab
        setlocal textwidth=80
        setlocal wrap

        setlocal cindent
        setlocal cinoptions=h1,l1,g1,t0,i4,+4,(0,w1,W4

        setlocal indentexpr=GoogleCppIndent()

        let b:undo_indent = "setl sw< ts< sts< et< tw< wrap< cin< cino< inde<"
    endfunction

    function! GoogleCppIndentOff()
        setlocal nowrap                      " Do not wrap long lines
        setlocal shiftwidth<                 " Use indents of 4 spaces
        setlocal tabstop<                    " An indentation every four columns
        setlocal softtabstop<                " Let backspace delete indent

        setlocal cinoptions<
        setlocal indentexpr<

        unlet b:undo_indent
    endfunction


    autocmd BufNewFile,BufRead *.C,*.cpp,*.cxx,*.c++,*.cc,*.hxx,*.hpp call GoogleCppIndentOn()
    autocmd BufNewFile,BufRead *.h command! GoogleCppIndentOn call GoogleCppIndentOn()
    autocmd BufNewFile,BufRead *.h command! GoogleCppIndentOff call GoogleCppIndentOff()

    "}

" }
